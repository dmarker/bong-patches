From 94243d1524060d3bc466383ecc56cf50482cc1c1 Mon Sep 17 00:00:00 2001
From: David Marker <dave@freedave.net>
Date: Thu, 31 Jul 2025 14:09:19 -0300
Subject: [PATCH] Teach ngctl to attach and run itself in a jail.

Add -j <jail> flag to ngctl to allow ngctl to attach and run inside a
jail. This allow parent to manipulate netgraph nodes in the jail
even if ngctl is not available.
---
 usr.sbin/ngctl/Makefile |  5 +++++
 usr.sbin/ngctl/main.c   | 43 ++++++++++++++++++++++++++++++++++-------
 usr.sbin/ngctl/ngctl.8  | 24 +++++++++++++++++++++--
 3 files changed, 63 insertions(+), 9 deletions(-)

diff --git a/usr.sbin/ngctl/Makefile b/usr.sbin/ngctl/Makefile
index 72a5ccaa96d7..997841272376 100644
--- a/usr.sbin/ngctl/Makefile
+++ b/usr.sbin/ngctl/Makefile
@@ -6,11 +6,16 @@ PROG=	ngctl
 MAN=	ngctl.8
 SRCS=	main.c mkpeer.c config.c connect.c dot.c name.c show.c list.c \
 	msg.c debug.c shutdown.c rmhook.c status.c types.c write.c
 WARNS?=	3
 
 LIBADD=	netgraph
 
 CFLAGS+= -DEDITLINE
 LIBADD+=	edit pthread
 
+.if ${MK_JAIL} != "no"
+CFLAGS+= -DJAIL
+LIBADD+=	jail
+.endif
+
 .include <bsd.prog.mk>
diff --git a/usr.sbin/ngctl/main.c b/usr.sbin/ngctl/main.c
index b9e88681d593..e957bc7db992 100644
--- a/usr.sbin/ngctl/main.c
+++ b/usr.sbin/ngctl/main.c
@@ -49,20 +49,24 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <sysexits.h>
 #include <unistd.h>
 #ifdef EDITLINE
 #include <signal.h>
 #include <histedit.h>
 #include <pthread.h>
 #endif
+#ifdef JAIL
+#include <sys/jail.h>
+#include <jail.h>
+#endif
 
 #include <netgraph.h>
 
 #include "ngctl.h"
 
 #define PROMPT			"+ "
 #define MAX_ARGS		512
 #define WHITESPACE		" \t\r\n\v\f"
 #define DUMP_BYTES_PER_LINE	16
 
@@ -131,52 +135,76 @@ const struct ngcmd quit_cmd = {
 
 /* Our control and data sockets */
 int	csock, dsock;
 
 /*
  * main()
  */
 int
 main(int ac, char *av[])
 {
-	char	name[NG_NODESIZ];
-	int	interactive = isatty(0) && isatty(1);
-	FILE	*fp = NULL;
-	int	ch, rtn = 0;
+	char		name[NG_NODESIZ];
+	int		interactive = isatty(0) && isatty(1);
+	FILE		*fp = NULL;
+	const char	*jail_name = NULL;
+	int		ch, rtn = 0;
 
 	/* Set default node name */
 	snprintf(name, sizeof(name), "ngctl%d", getpid());
 
 	/* Parse command line */
-	while ((ch = getopt(ac, av, "df:n:")) != -1) {
+	while ((ch = getopt(ac, av, "df:j:n:")) != -1) {
 		switch (ch) {
 		case 'd':
 			NgSetDebug(NgSetDebug(-1) + 1);
 			break;
 		case 'f':
 			if (strcmp(optarg, "-") == 0)
 				fp = stdin;
 			else if ((fp = fopen(optarg, "r")) == NULL)
 				err(EX_NOINPUT, "%s", optarg);
 			break;
+		case 'j':
+#ifdef JAIL
+			jail_name = optarg;
+#else
+			errx(EX_UNAVAILABLE, "not built with jail support");
+#endif
+			break;
 		case 'n':
 			snprintf(name, sizeof(name), "%s", optarg);
 			break;
 		case '?':
 		default:
-			Usage((char *)NULL);
+			Usage(NULL);
 			break;
 		}
 	}
 	ac -= optind;
 	av += optind;
 
+	if (jail_name != NULL) {
+		int jid;
+
+		if (jail_name[0] == '\0')
+			Usage("invalid jail name");
+
+		jid = jail_getid(jail_name);
+
+		if (jid == -1)
+			errx((errno == EPERM) ? EX_NOPERM : EX_NOHOST,
+			    "%s", jail_errmsg);
+		if (jail_attach(jid) != 0)
+			errx((errno == EPERM) ? EX_NOPERM : EX_OSERR,
+			    "cannot attach to jail");
+	}
+
 	/* Create a new socket node */
 	if (NgMkSockNode(name, &csock, &dsock) < 0)
 		err(EX_OSERR, "can't create node");
 
 	/* Do commands as requested */
 	if (ac == 0) {
 		if (fp != NULL) {
 			rtn = ReadFile(fp);
 		} else if (interactive) {
 			rtn = DoInteractive();
@@ -651,13 +679,14 @@ DumpAscii(const u_char *buf, int len)
 
 /*
  * Usage()
  */
 static void
 Usage(const char *msg)
 {
 	if (msg)
 		warnx("%s", msg);
 	fprintf(stderr,
-		"usage: ngctl [-d] [-f file] [-n name] [command ...]\n");
+		"usage: ngctl [-j jail] [-d] [-f filename] [-n nodename] "
+		"[command [argument ...]]\n");
 	exit(EX_USAGE);
 }
diff --git a/usr.sbin/ngctl/ngctl.8 b/usr.sbin/ngctl/ngctl.8
index 2225c836674a..4189beb0a6b7 100644
--- a/usr.sbin/ngctl/ngctl.8
+++ b/usr.sbin/ngctl/ngctl.8
@@ -32,24 +32,25 @@
 .\" $Whistle: ngctl.8,v 1.6 1999/01/20 03:19:44 archie Exp $
 .\"
 .Dd January 19, 1999
 .Dt NGCTL 8
 .Os
 .Sh NAME
 .Nm ngctl
 .Nd netgraph control utility
 .Sh SYNOPSIS
 .Nm
+.Op Fl j Ar jail
 .Op Fl d
 .Op Fl f Ar filename
 .Op Fl n Ar nodename
-.Op Ar command ...
+.Op Ar command Op Ns Ar argument ...
 .Sh DESCRIPTION
 The
 .Nm
 utility creates a new netgraph node of type
 .Em socket
 which can be used to issue netgraph commands.
 If no
 .Fl f
 flag is given, no
 command is supplied on the command line, and standard input is a tty,
@@ -66,26 +67,45 @@ supports binary/ASCII control message conversion.
 .Pp
 In interactive mode,
 .Nm
 will display any control messages and data packets received by the socket node.
 In the case of control messages, the message arguments are displayed in
 .Tn ASCII
 form if the originating node supports conversion.
 .Pp
 The options are as follows:
 .Bl -tag -width indent
-.It Fl f Ar nodeinfo
+.It Fl f Ar filename
 Read commands from the named file.
 A single dash represents the standard input.
 Blank lines and lines starting with a
 .Dq #
 are ignored.
+Note that when the
+.Fl j Ar jail
+option is specified, the file will be opened before attaching to the jail and
+then be processed inside the jail.
+.It Fl j Ar jail
+Perform the actions inside the
+.Ar jail .
+.Pp
+.Nm
+will first attach to the
+.Ar jail
+(by jail id or jail name) before performing the effects.
+.Pp
+This allows netgraph nodes of
+.Ar jail
+to be created, modified, and destroyed even if the
+.Nm
+binary is not available in
+.Ar jail .
 .It Fl n Ar nodename
 Assign
 .Em nodename
 to the newly created netgraph node.
 The default name is
 .Em ngctlXXX
 where XXX is the process ID number.
 .It Fl d
 Increase the debugging verbosity level.
 .El
-- 
2.48.1

